/*---by Satoshi HORII---*//*---http://satcy.net/---*/inlets = 2;outlets = 2;sketch.ortho3d(); //like default3d but uses orthographic projectionvar vbrgb = [0.3,0.3,0.3];var vfrgb = [0.5,0.5,0.5];var w = [0,0];var last_x = 0;var svx =0;var vx = 0;var vy = 0;var vradius = 1.;var vsize = 1.;// process argumentsif (jsarguments.length>1)	vfrgb[0] = jsarguments[1]/255.;if (jsarguments.length>2)	vfrgb[1] = jsarguments[2]/255.;if (jsarguments.length>3)	vfrgb[2] = jsarguments[3]/255.;if (jsarguments.length>4)	vbrgb[0] = jsarguments[4]/255.;if (jsarguments.length>5)	vbrgb[1] = jsarguments[5]/255.;if (jsarguments.length>6)	vbrgb[2] = jsarguments[6]/255.;if (jsarguments.length>7)	vradius = jsarguments[1];draw();function draw(){	var str;		with (sketch) {		glclearcolor(vbrgb);					glclear();					glcolor(vfrgb);		moveto(w[1]+(w[0]-w[1])/2.,0.);		plane(Math.abs(w[0]-w[1])/2.,vradius);	}}function msg_float(v){	var i = inlet;		if (i==0)		list(v,vy);	else		list(vx,v);	}function list(){	var width = box.rect[2] - box.rect[0];	var height = box.rect[3] - box.rect[1];	//if (arguments.length>0)		svx = arguments[0]/vsize;	//if (arguments.length>1)		vx = arguments[1]/vsize;			if (vx<0) vx = 0;	else if (vx>1) vx = 1;	if (svx<0) svx = 0;	else if (svx>1) svx = 1;		var z1 = sketch.screentoworld(vx*width,0);	var z2 = sketch.screentoworld(svx*width,0);	w[0] = z1[0];	w[1] = z2[0];	notifyclients();	bang();}function bang(){	draw();	refresh();	if (vx>svx){		var out0=svx;		var out1=vx;	} else {		var out0=vx;		var out1=svx;	}	outlet(1,out1*vsize);	outlet(0,out0*vsize,out1*vsize);}function fsaa(v){	sketch.fsaa = v;	bang();}function frgb(r,g,b){	vfrgb[0] = r/255.;	vfrgb[1] = g/255.;	vfrgb[2] = b/255.;	draw();	refresh();}function brgb(r,g,b){	vbrgb[0] = r/255.;	vbrgb[1] = g/255.;	vbrgb[2] = b/255.;	draw();	refresh();}function setsize(v){	vsize = v;	draw();	refresh();}function setsel(x,sx){	var width = box.rect[2] - box.rect[0];	var height = box.rect[3] - box.rect[1];	svx = sx/vsize;	vx = x/vsize;			if (vx<0) vx = 0;	else if (vx>1) vx = 1;	if (svx<0) svx = 0;	else if (svx>1) svx = 1;		var z1 = sketch.screentoworld(vx*width,0);	var z2 = sketch.screentoworld(svx*width,0);	w[0] = z1[0];	w[1] = z2[0];	notifyclients();	draw();	refresh();}function radius(v){	vradius = v;	draw();	refresh();}function setvalueof(x,y){	list(x,y);}function getvalueof(){	var a = new Array(vx,vy);		return a;}function onresize(w,h){	draw();	refresh();}onresize.local = 1; //privatefunction onclick(x,y){	var z = sketch.screentoworld(x,y);	w[1] = z[0];	var width = box.rect[2] - box.rect[0];	if (x<0) x = 0;	else if (x>width) x = width;	svx = x/width;	//ondrag(x,y);}onclick.local = 1; //privatefunction ondrag(x,y){	var width = box.rect[2] - box.rect[0];	var height = box.rect[3] - box.rect[1];			if (x<0) x = 0;	else if (x>width) x = width;	if (y<0) y = 0;	else if (y>height) y = height;	var z = sketch.screentoworld(x,y);	w[0] = z[0];	vx = x/width;	vy = 1- y/height;	notifyclients();	bang();}ondrag.local = 1; //private 